<p>
        Learn more about all available HTML elements on
        <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element"
          >the MDN HTML element refrence</a
        >
</p>
 
<p>
        Learn more about CSS properties and values on
        <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Reference"
          >the MDN CSS property refrence.</a
        >
</p>
 
 Also use google fonts to add any fonts to your page.

note!= when linking a HTML file to multple CSS files and those CSS files have different values for the same element the later link would overwrite the links before it in the HTML head.

 Inline elements are HTML elements that are displayed inline with the surrounding content, meaning they do not start on a new line and only take up as much width as necessary. 
 Some common inline elements include <span>, <a>, <strong>, <em>, and <img>.

 Block level elements on the other hand start on a new line.

The dislplay property can be used to change an element type from block to inline or inline-block...
The <div> element in HTML is a generic container element that is used to group together other elements and to create logical divisions or sections within a webpage.
The <div> element itself does not have any specific semantic meaning and is primarily used for styling purposes or to apply JavaScript functionality.

the <span> element is an inline container which is usually used within elements, and it's used to highlight specific parts of the elements to apply styles to that part.'
the span elements can also be used in the same way like the div element if someone wants an inline container and viceversa

e.g. <p>This is a <span id="highlighted-text">highlighted</span> word.</p>
#highlighted-text {
  color: red;
  font-weight: bold;
}

The <nav> element in HTML is used to define a section of a webpage that contains navigation links. 

In HTML, the <section> element is used to define sections or groupings of content within a webpage. It is a semantic HTML5 element that helps structure the content of a webpage in a meaningful way,

Pseudo-classes, on the other hand, are keywords added to selectors that specify a special state of the selected element
Some common pseudo-classes include :hover, :focus, :active, and :nth-child().
e.g. a:hover {
  color: red;
}

Inheritance:  Inheritance is the mechanism by which styles applied to a parent element can be passed down to its children.
For example, if you set the font size of the body element to 16px, all text content inside the body element (e.g., paragraphs, headings) will inherit that font size unless explicitly overridden.


 to select an element by its id write the hash symbol followed by the id name*/
 ctrl and / is shortcut for adding a comment*/

  <!--metadata i.e. elements which are not visible in the page itself e.g. style element-->
  <head>
    <link href="day4.css" rel="stylesheet" />
    <!--link elemnet is a void element i.e. self closing tag-->
    <!--href for the refrences and rel for the relation-->
    <!--link tag is diffrent from the anchor tag because anchor tag gives a clickable link while link tag links two pages together-->
    <title>My daily challenge</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Fira+Sans+Extra+Condensed:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Fira+Sans:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
      rel="stylesheet"
    />
  </head>

A link directs the user to another webpage or resource, while an anchor directs the user to a specific point within the same webpage. Both are used to improve navigation and user experience on websites.
A class selector can be used for multiple elements whilist an id selector can only be used once and id is declared with a # and a class with a .

p {
  font-family: "fira-sans", "times-new-Roman"; /* the second font is a fallback font*/
  text-align: center;
  color: rgb(83, 75, 75);
}

id's # are unique classes . are not

CSS box model content-
(padding:(inside space): top, right, bottom, left; border: border radius border type border color;)
padding is inside, margin is outside space.

Box-shadow property: "horizontal offset e.g. 1px"  "vertical offset e.g. 1px" "blur radius e.g. 2px" "rgb(red, gree, blue)"

Inset: this keyword creates an inset shadow making the shadow look like its inside the element, 
offset-x: Specifies the horizontal distance of the shadow from the element. Positive values move the shadow to the right, while negative values move it to the left.
offset-y: This value specifies the vertical distance of the shadow from the element
blur-radius: This value specifies the blur radius of the shadow. The larger the value, the more blurred the shadow appears.
spread-radius: This value specifies the spread radius of the shadow. Positive values cause the shadow to expand and grow bigger, while negative values cause it to shrink.
color: This value specifies the color of the shadow. You can use named colors like red, hexadecimal codes like #ff0000, RGB values like rgb(255, 0, 0), or RGBA values like rgba(255, 0, 0, 0.5) for transparency.

In CSS, you can use the border property to define a border around an element. The border property can specify the width, style, and color of the border.
e.g. ...
#id {
    border: [border-width] [border-style] [border-color];
} colors (names(red), hexadecimal values(#rrggbb) rgb values(255, 0, 0) or hsl values(0, 100%, 50%))

<pre></pre> <!--the preformatted tag is used to output anything between it as plain text, and &gt is greater than & lt is less than-->

text-decoration: dashed or underlined or none etc...
text-transform: capitalize or lowercase or uppercase or inheret etc...

left to right is the main axis and top to bottom is the cross axis.

Flexbox 

[The CSS Flexbox] display: flex; allows us to manage the space or the way elements are aligned and positioned inside the flex container,
the container or the element in which the display: flex; is in is the parent container and the elements inside it are the children.
flex-direction: row or column; row is the default direction of flexbox, flex-direction: row-reverse or column-reverse; (row-reverse reverses the position of the elements in the cross axis and column-reverse does the same but in the main axis).

flex-wrap: nowrap or wrap;  the default value of the flexbox is nowrap (is a property in CSS that allows you to wrap flex items to a new line when there is not enough space to fit them in a single line. and nowrap means that the items will not wrap into a new line)

flex-flow:row nowrap, is combination of both flex-direction and flex-wrap so its a shortcut.

justify-content: ;  values (center or start or end or stretch or space-between or space-evenly etc...) along the main axis.
align-items: ; values (center or start or end or stretch or space-between or space-evenly etc...) is used to specify how items within a flexbox or grid container should be aligned along the cross axis.
flex-start is the default value.
align-content: ; is the same as align-items: ; but align-items is used when there is only one line of items but align-content is used when there are multiple lines of items.
gap: ;

the difference between justify-content and align-items is that;
justify-content is used to specify how items within a flexbox or grid container should be aligned along the main axis.
align-items is used to specify how items within a flexbox or grid container should be aligned along the cross axis.

background-image: url(/images/places/ocean.jpg) this property in css allows you to add an image as a Background image.
background-position: center; to make the image centered.
background-size: cover; to make the image's size just cover the entire page.

Opacity is a CSS property that allows you to control the transparency or opacity of an element. It's a value that ranges from 0 (fully transparent) to 1 (fully opaque) the values are 0.1 0.2 etc...
in the rgba() the a is opacity

Position: ; property
position: static; Position is a CSS property that allows you to control the placement of an element within its containing element or the browser window.
the default position is static, but there are 5 values: 1.static, 2.relative, 3.absolute, 4.fixed, 5.sticky

Static (Default):
Positioned based on the normal document flow.
Not affected by top, right, bottom, left, or z-index properties.

Relative:
Positioned relative to their normal position in the document flow.
Can be offset from their original position using top, right, bottom, and left properties.

Absolute:
Positioned relative to their nearest positioned ancestor (or the initial containing block if no ancestor is positioned).
Removed from the normal document flow and do not affect other elements' positions.

Fixed:
Elements with position: fixed; are positioned relative to the viewport (the browser window or the user's screen).
They are removed from the normal document flow and do not affect other elements' positions.

top: 20px;
bottom: 10px;
right: 10px;
left: 20px;

The percentage value is relative to its parent element so 100% means cover the entire element.
e.g. width: 50%; will take 50% of the parent element etc...

The box-sizing property is a CSS property that determines how the width and height of an element are calculated and applied.
the box-sizing property has three values, content-box(default), border-box and inherit.

In conten-box the padding and the border increases the width,
but in border-box the padding and the border is taken from the width,
and inherit means that the element will inherit the value of that property from its parent element, so if the property of its parent element was border-box would it also be border-box

note! the content-sizing property does not apply to margin i.e. it doesn't affect the margin it only applies to content, padding and border.

the <img src"" alt""> img element normally has an src""attribute and alt"" alternative.
the <p> <strong> Mustafa</strong></p> is an inline element which be used to turn its content to bold.

object-fit is a CSS property that allows you to control how an image or other element is resized to fit its container.
When you set object-fit on an element, you can specify how the element should be resized to fit its container.
The possible values are:

1.cover: Scale the element to cover the entire container, while maintaining its aspect ratio. This means that some parts of the element may be cropped.

2.contain: Scale the element to fit within the container, while maintaining its aspect ratio. This means that the element may not fill the entire container, but it will not be cropped.

3.fill: Scale the element to fill the entire container, while maintaining its aspect ratio. This means that the element will be stretched to fit the container, and some parts of it may be distorted.

4.scale-down: Scale the element down to fit within the container, while maintaining its aspect ratio. If the element is larger than the container, it will be scaled down to fit.

the difference between scale-down and cover, cover will make make the image cover the entire container and if the image is larger it will be cropped down and if its smaller it will be stretched to fit the container,
but with scale down it does the same except that if the image is smaller it will not be stretched to fit the container.

Margin collapsing:
Margin collapsing occurs when two or more elements with margins touch each other, and the browser "collapses" the margins to create a single, larger margin. This can affect the layout and appearance of your page, especially when working with complex layouts and nested elements.

an example to illustrate margin collapsing:
<div style="margin: 10px; border: 1px solid black;">Element 1</div>
<div style="margin: 20px; border: 1px solid black;">Element 2</div>

So in Element 1 and Element 2 the horizontal margin will be 20px and the vertical margin will be 30px,
that's because horizontal(left and right) margins collapse i.e. the gap's value will be of the largest value,
but vertical(top and bottom) margins donot collapse i.e. the gap's value will be the value of both margins added together.

To avoid margin collapsing or to control its behaviour: Padding is normally used because when they are added they donot collapse and if the margins collapse adding a padding value would help to add the value of the collapsed margin i.e. the margin with the smaller value.

Linear-gradient:(to top, red 50%, green 30%, blue 20%); can have 2values i.e. the gradient direction or the gradient percentage and after that you can add as many colors as you want.
and if you don't specify percentages after each color, the default behavior is that the colors will be evenly distributed along the gradient.
e.g.
When you use linear-gradient(45deg, grey, light-brown), you're creating a linear gradient that transitions from grey to light-brown, 
and the angle value is 45deg, the angle value is measuered from the x-axis (ie.e bottom left to the y-axis i.e. top right).
0° (or 360°) is at the bottom left
90° is at the top left
180° is at the top right
270° is at the bottom right

The overflow property is a CSS property that determines what happens to the content of an element when it exceeds its defined size. It's commonly used to control the behavior of elements that contain too much content, such as text, images, or other elements.

The values of the overflow property:
visible: This is the default value. It means that the content will be displayed as usual, and any excess content will be visible outside the element.
hidden: This value hides the excess content, so only the content that fits within the element's boundaries is visible.
scroll: This value adds a scrollbar to the element, allowing users to scroll through the excess content.
auto: This value is similar to scroll, but it only adds a scrollbar if the content overflows the container. If the content fits within the container, no scrollbar is added.
inherit: This value inherits the overflow property from its parent element.
overlay: This value is similar to hidden, but it also adds a visual indicator (such as a dashed line) to show that there is more content available.

Here are some common use cases for the overflow property:
** Preventing text wrapping**: Set overflow to hidden to prevent text from wrapping onto a new line.
Creating a scrollbar: Set overflow to scroll to add a scrollbar to an element, allowing users to scroll through excess content.
Hiding excess content: Set overflow to hidden to hide excess content that exceeds an element's boundaries.

The overflow property can also be applied to specific axes, such as:

overflow-x: controls horizontal overflow
overflow-y: controls vertical overflow
The CSS grid:

notes!-  
The CSS Grid is a two-dimensional layout system, meaning it can create a grid with both rows and columns. 
This allows for more complex layouts with multiple axes of alignment.
On the other hand, CSS Flexbox is a one-dimensional layout system, meaning it's designed for laying out elements in a single dimension, either horizontally or vertically. 
While Flexbox can be used to create complex layouts, it's typically used for simpler layouts such as:

- Laying out a series of items horizontally or vertically
- Creating a navigation bar or footer
- Designing a responsive layout with a single axis of alignment

CSS Grid, on the other hand, is better suited for more complex layouts that require:
- Multiple axes of alignment (both rows and columns)
- Complex grid structures with multiple rows and columns
- Precise control over grid cell sizes and spacing
- Ability to create grid templates with repeating patterns
display: grid;

grid-template-columns: 2 or 1fr 3fr or 100px 300px; (example for some possible values for the property)
so grid-template-columns is aproperty that can be used to define the number of columns as in the e.g. above (2columns),
or it can be used to divide the coulumns in the page as in the e.g. above (the 1st column has 1fraction of the space whilst the second coulumn has 3fracts of the page),
or it can be used to define coulumn widths as in the e.g. above the 1st coulumn has 100px and the 2nd has 300px.

The grid-coulumn property: is a property that allows you to specify which grid columns an element should span. 
e.g. grid-column: 3 or 3/4; etc...
so In the first e.g. above the target is the 3rd coulumn and it only spans that coulumn.
In the second e.g. above the the target is the 3rd coulumn and it spans up to the 4th coulumn.

the difference between grid-column and grid-template-coulumns is:
- grid-template-columns: is a property that defines the template of the grid, specifying the number of columns and their widths.
- grid-column: is a property that specifies which grid columns an element should occupy.

A pseudo class in css:
li:first-of-type {
  background-color: yellow;
}
The :first-of-type pseudo-class targets the first element of a specific type(in this case the list element) within its parent element.

another one is the: 
li:nth-of-type(3) {
  background-color: yellow;
}
The li:n-of-type() pseudo-class targets the element's number specified in its columns, the element of a specific type(in this case the li: list items) within its parent element.

The gap property: 
Gap is a property that adds space between grid cells or grid rows.
It creates a gap between the cells or rows within a grid container.
Gap is measured from the inside of the grid cells or rows.
Gap is only applicable when using the grid-template-columns or grid-template-rows properties to create a grid layout.

The first value in the gap property is for the rows and the second is for the columns.

The <meta charset="UTF-8" /> i.e. unicode UTF-8: its a link in the head.
The UTF-8 (8-bit Unicode Transformation Format) metacharset is a character encoding scheme used to represent Unicode characters ranging from all the alphabet to numbers and other characters like arrows etc... .
before addin the hex code of the UTF-8 charset or character set you should add &#x and thats because This is because the &#x notation is part of the HTML and XML standards for representing Unicode characters.

list-style: none; to remove all the styles from your lists.
text-decoration: none; to remove all style form your texts specificly used for anchor tag.

One of the bigger disadvantages of the px unit in css is that it is not scalable and it reduces the user focus, for e.g. when you define a fixed pixel values on an image or fonts users and viewers of your website wont be able to adjust the view to their need.

                                                  Comparing Units: px, %percentage, em, rem

px: The pixel unit is the most common unit used in CSS, and its used to define the size and position of elements on a web page.
Percentage (%): The percentage unit is used to define the size and position of elements relative to their parent element. It is often used for layout purposes, such as setting the width of a container element, also its hard to manage due to its - Cascading nature.
a cascading nature is When you use a percentage value in CSS, it can affect the styles of elements that are nested within it. This is because percentage values are calculated relative to the parent element, which means that the styles can cascade down to child elements.
Em (em): The em unit is a relative unit that is based on the font size of the parent element. It is often used for typography purposes, such as setting font sizes or line heights.
Root Em (rem): The rem unit is a relative unit that is based on the root element of the document, which is typically the <html> element. It is often used for typography purposes, such as setting font sizes or line heights.